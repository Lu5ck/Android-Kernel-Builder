name: "Build kernels"

env:
  OUT_DIR: "${{ github.workspace }}/out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
      builddate: ${{ steps.generate-builddate.outputs.builddate }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq -s '[.[][]]' repos/repos*.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: "‚è∞ Set builddate"
        id: generate-builddate
        run: echo "builddate=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      WORKSPACE: ${{ github.workspace }}

      builddate: "${{ needs.Set-repos.outputs.builddate }}"

      KERNEL_NAME: ${{ matrix.repos.kernelSource.name }}
      KERNEL_REPO: ${{ matrix.repos.kernelSource.repo }}
      KERNEL_BRANCH: ${{ matrix.repos.kernelSource.branch }}
      KERNEL_DEVICE: ${{ matrix.repos.kernelSource.device }}

      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.defconfig }}

      withKernelSU: ${{ matrix.repos.withKernelSU }}
      ccache: ${{ matrix.repos.ccache }}
      useAnykernel: ${{ matrix.repos.AnyKernel3.use }}
      release: ${{ matrix.repos.AnyKernel3.release }}
    steps:
      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt list --installed
          sudo apt remove -y binutils
          sudo apt autoremove -y
          sudo apt update
          sudo apt install -y --no-install-recommends git make bc bison openssl \
          curl zip kmod cpio flex libelf-dev libssl-dev libtfm-dev wget \
          device-tree-compiler ca-certificates python3 python2 xz-utils \
          ccache rar libgcc-10-dev gcc g++
          sudo apt update && sudo apt upgrade -y

          python_version="${PYTHON_VERSION:-3}"
          sudo ln -sf "/usr/bin/python${python_version}" /usr/bin/python

      - name: "üöÑ Create cache key from `repos`"
        if: ${{ env.ccache == 'true' }}
        id: ccache_key
        run: |
          ccache -o compression=false -o cache_dir=$HOME/.ccache
          echo "CACHE_KEY=$(echo -n '${{ toJSON(matrix.repos) }}' | base64 -w 0 | cut -c -48)" >> $GITHUB_OUTPUT

      - name: "üöÖ Cache ccache files"
        if: ${{ env.ccache == 'true' }}
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            ${{ env.OUT_DIR }}
          key: ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}
          restore-keys: |
            ccache-${{ env.KERNEL_NAME }}-${{ steps.ccache_key.outputs.CACHE_KEY }}-${{ env.builddate }}

      - name: "‚è∞ Setup Anykernel3"
        env:
          params: "${{ toJSON(matrix.repos.AnyKernel3) }}"
        run: |
          ANYKERNEL_REPO=$(echo $params | jq -r ".repo")
          ANYKERNEL_BRANCH=$(echo $params | jq -r ".branch")
          git clone --recursive --depth=1 -j $(nproc) --branch $ANYKERNEL_BRANCH $ANYKERNEL_REPO AnyKernel3

          echo "ü§î Setup Anykernel3 => ($ANYKERNEL_REPO)"

      - name: "üåü Clone kernel source => (${{ env.KERNEL_REPO }})"
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch $KERNEL_BRANCH $KERNEL_REPO $KERNEL_NAME

          echo "ü§î Clone kernel source => ($KERNEL_REPO)"

      - name: "üí´ Get toolchains"
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "ü§î There is $toolchains_num defined toolchains."
          for ((i=0;i<toolchains_num;i++)); do
            toolchain_name=$(echo $toolchains | jq -r ".[$i].name")
            # Github
            toolchain_repo=$(echo $toolchains | jq -r ".[$i].repo")
            toolchain_branch=$(echo $toolchains | jq -r ".[$i].branch")
            # From archive
            toolchain_url=$(echo $toolchains | jq -r ".[$i].url")
            
            if [ -z "${toolchain_url:-}" ] || [ "$toolchain_url" = "null" ];  then
              git clone --recursive --depth=1 -j $(nproc) --branch $toolchain_branch $toolchain_repo $toolchain_name
              echo "ü§î Clone $toolchain_name => ($toolchain_repo)"
            else
              echo "Working on $toolchain_url"
              wget -q "$toolchain_url"
              filename="${toolchain_url##*/}"
              mkdir -p $toolchain_name
              case "$filename" in
                *.zip)
                  unzip -d $toolchain_name "$filename"
                  ;;
                *.tar)
                  tar xf "$filename" -C $toolchain_name
                  ;;
                *.tar.gz)
                  tar zxf "$filename" -C $toolchain_name
                  ;;
                *.rar)
                  unrar x "$filename" $toolchain_name
                  ;;
                *)
                  echo "unknown file type: $filename"
                  ;;
              esac
              rm $filename
            fi

            jq -r ".[$i].binPath[] | tostring" <<< "$toolchains" | while read -r bin_path; do
              echo "$WORKSPACE/$toolchain_name/$bin_path" >> $GITHUB_PATH

              if [ $toolchain_name = "host" ]; then
                for k in $WORKSPACE/$toolchain_name/$bin_path/x86_64-linux-*; do
                  echo $k
                  ln -sf "$k" "${i/x86_64-linux-}"
                done
              fi
            done
          done

      - name: "üòé Set args"
        id: generate-args
        env:
          makeOptions: "${{ toJSON(matrix.repos.makeOptions) }}"
          makeExports: "${{ toJSON(matrix.repos.makeExports) }}"
          THREAD: $(nproc --all)
        run: |
          echo "ü§î PATH Variable: $PATH"

          echo  "Setting up the make options"
          makeArgs="-j${{ env.THREAD }}"

          while IFS='|' read key value; do
            if [ $key = "ARCH" ]; then
              echo "ARCH=$value" >> $GITHUB_OUTPUT
            fi

            if [ $key = "CC" ]; then
              if [ ${{ env.ccache }} = true ]; then
                value="\"ccache $value\""
              fi
            fi

            makeArgs="$makeArgs $key=$value"
          done < <(jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' <<< "$makeOptions")

          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p ${{ env.OUT_DIR }} && makeArgs="$makeArgs O=${{ env.OUT_DIR }}"
          fi

          echo "makeArgs=$makeArgs" >> $GITHUB_OUTPUT

          echo  "Setting up the make exports"
          while IFS='|' read key value; do
            echo "${key}=${value}" >> "$GITHUB_ENV"
          done < <(jq -r 'to_entries | map(.key + "|" + (.value | tostring)) | .[]' <<< "$makeExports")

      - name: "üòã Update KernelSU"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi

          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main

          echo -e "CONFIG_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_HAVE_KPROBES=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "CONFIG_KPROBE_EVENTS=y" >> arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

          cat arch/${{ env.arch }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üëç Make defconfig"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          makeArgs: ${{ steps.generate-args.outputs.makeArgs }}
          arch: ${{ steps.generate-args.outputs.ARCH }}
        run: |
          echo "PATH Variable: $PATH"
          echo "Make Options: $makeArgs"
          make ${{ env.makeArgs }} ${{ env.DEFCONFIG_NAME }}
          sudo apt list --installed

      - name: "üé∂ Build kernel"
        working-directory: ${{ env.KERNEL_NAME }}
        env:
          makeArgs: ${{ steps.generate-args.outputs.makeArgs }}
        run: |
          echo "PATH Variable: $PATH"
          echo "Make Options: $makeArgs"
          make ${{ env.makeArgs }} prepare
          make ${{ env.makeArgs }}

      - name: "üíõ Upload Image"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: Image-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíô Upload Image.gz"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: Image.gz-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíú Upload dtb"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: dtb-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Upload dtbo.img"
        uses: actions/upload-artifact@v3
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
        with:
          name: dtbo.img-${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}-${{ env.builddate }}
          path: ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Pack AnyKernel3.zip"
        if: ${{ env.useAnykernel == 'true' }}
        env:
          arch: ${{ steps.generate-args.outputs.ARCH }}
          anykernel: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
        run: |
          ls -al

          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/Image.gz ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo ./AnyKernel3/
          fi
          if [ -e "${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img" ]; then
            cp -f ${{ env.OUT_DIR }}/arch/${{ env.arch }}/boot/dtbo.img ./AnyKernel3/
          fi

          cd AnyKernel3/
          zip -q -r "${{ env.anykernel }}.zip" *

      - name: "üíæ Upload AnyKernel3 image => (${{ env.builddate }})"
        uses: actions/upload-artifact@v3
        if: ${{ env.useAnykernel == 'true' }}
        with:
          name: "${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}"
          path: AnyKernel3/*

      - name: üßß Create GitHub Release => (${{ env.builddate }})
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        if: ${{ env.useAnykernel == 'true' && env.release == 'true' }}
        with:
          tag_name: v${{ env.builddate }}.${{ github.run_number }}
          files: "${{ env.WORKSPACE }}/${{ env.KERNEL_DEVICE }}-${{ env.KERNEL_NAME }}_${{ env.builddate }}.zip"
          generate_release_notes: true
